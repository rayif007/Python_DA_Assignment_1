{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPeOmVS++hUfQOVlj6u1cuf"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## Section 1: NumPy Array Operations"],"metadata":{"id":"46rWfv2od3h2"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bUYz1Ao0dLtX","executionInfo":{"status":"ok","timestamp":1751901859560,"user_tz":-330,"elapsed":36,"user":{"displayName":"Muhammed Rayif","userId":"06425225599452089122"}},"outputId":"9493e722-30d1-48ad-fb31-faf9e05a22de"},"outputs":[{"output_type":"stream","name":"stdout","text":["Shape: (7,)\n","Data Type: float64\n","Total Elements: 7\n","Fahrenheit: [72.5  77.54 69.44 74.12 78.98 76.64 71.42]\n","Max Temperature: 26.1\n","Min Temperature: 20.8\n","Mean Temperature: 23.542857142857144\n","First 3 Days: [22.5 25.3 20.8]\n","Weekend (last 2 days): [24.8 21.9]\n","Middle 3 Days: [20.8 23.4 26.1]\n","2D Shape: (2, 7)\n","2D Data Type: float64\n","2D Total Elements: 14\n","Week 1 Temperatures: [22.5 25.3 20.8 23.4 26.1 24.8 21.9]\n","Week 2 Temperatures: [19.2 22.5 21.3 24.  23.5 22.8 20.1]\n","Weekend Temps (Both Weeks): [[24.8 21.9]\n"," [22.8 20.1]]\n"]}],"source":["import numpy as np\n","\n","#  Create 1D NumPy array for Week 1\n","temperatures_w1 = np.array([22.5, 25.3, 20.8, 23.4, 26.1, 24.8, 21.9])\n","\n","#  Inspection and properties\n","print(\"Shape:\", temperatures_w1.shape)\n","print(\"Data Type:\", temperatures_w1.dtype)\n","print(\"Total Elements:\", temperatures_w1.size)\n","\n","#  Array Operations: Celsius to Fahrenheit\n","temperatures_fahrenheit = (temperatures_w1 * 9/5) + 32\n","print(\"Fahrenheit:\", temperatures_fahrenheit)\n","\n","print(\"Max Temperature:\", np.max(temperatures_w1))\n","print(\"Min Temperature:\", np.min(temperatures_w1))\n","print(\"Mean Temperature:\", np.mean(temperatures_w1))\n","\n","#  Slicing and Indexing\n","print(\"First 3 Days:\", temperatures_w1[:3])\n","print(\"Weekend (last 2 days):\", temperatures_w1[-2:])\n","print(\"Middle 3 Days:\", temperatures_w1[2:5])\n","\n","#  Create 2D Array (Week 1 + Week 2)\n","temperatures_w2 = np.array([19.2, 22.5, 21.3, 24.0, 23.5, 22.8, 20.1])\n","temperatures = np.array([temperatures_w1, temperatures_w2])\n","\n","#  2D Array Inspection and Slicing\n","print(\"2D Shape:\", temperatures.shape)\n","print(\"2D Data Type:\", temperatures.dtype)\n","print(\"2D Total Elements:\", temperatures.size)\n","\n","print(\"Week 1 Temperatures:\", temperatures[0])\n","print(\"Week 2 Temperatures:\", temperatures[1])\n","print(\"Weekend Temps (Both Weeks):\", temperatures[:, -2:])"]},{"cell_type":"markdown","source":["## Section 2 â€“ Pandas Series"],"metadata":{"id":"7xQ1iwLjf9e4"}},{"cell_type":"code","source":["import pandas as pd\n","\n","marks = pd.Series([95, 92, 89, 85, 80], index=['Rank1', 'Rank2', 'Rank3', 'Rank4', 'Rank5'])\n","\n","print(\"Marks series:\")\n","print(marks)\n","\n","\n","#  Integer index position of 1st rank student (index 0)\n","print(\"\\nMark of 1st rank (integer index):\", marks[0])\n","\n","#  loc accessor for top 3 ranks\n","print(\"\\nTop 3 rank marks using loc:\")\n","print(marks.loc[['Rank1', 'Rank2', 'Rank3']])\n","\n","# iloc accessor for 3rd rank\n","print(\"\\nMark of 3rd rank using iloc:\", marks.iloc[2])\n","\n","#  Boolean mask: marks > 90\n","print(\"\\nRanks with marks > 90:\")\n","print(marks[marks > 90])\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"daUp70D9f_2X","executionInfo":{"status":"ok","timestamp":1751902686389,"user_tz":-330,"elapsed":17,"user":{"displayName":"Muhammed Rayif","userId":"06425225599452089122"}},"outputId":"339f7922-f6a6-418f-b42b-641d0c18e6dc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Marks series:\n","Rank1    95\n","Rank2    92\n","Rank3    89\n","Rank4    85\n","Rank5    80\n","dtype: int64\n","\n","Mark of 1st rank (integer index): 95\n","\n","Top 3 rank marks using loc:\n","Rank1    95\n","Rank2    92\n","Rank3    89\n","dtype: int64\n","\n","Mark of 3rd rank using iloc: 89\n","\n","Ranks with marks > 90:\n","Rank1    95\n","Rank2    92\n","dtype: int64\n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-11-1668135037.py:10: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n","  print(\"\\nMark of 1st rank (integer index):\", marks[0])\n"]}]},{"cell_type":"code","source":["#Data manipulation\n","#  Update 1st rank to 100\n","marks['Rank1'] = 100\n","print(\"\\nUpdated Mark for Rank1:\", marks['Rank1'])\n","\n","#  Remove last rank\n","marks.drop('Rank5', inplace=True)\n","print(\"\\nAfter removing Rank5:\\n\", marks)\n","\n","#  Calculate CGPA (mark / 10)\n","cgpa = marks / 10\n","print(\"\\nCGPA (marks / 10):\\n\", cgpa)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kMu5SPMbi6cK","executionInfo":{"status":"ok","timestamp":1751902869028,"user_tz":-330,"elapsed":113,"user":{"displayName":"Muhammed Rayif","userId":"06425225599452089122"}},"outputId":"80ddc3ec-3ff8-405f-9873-41be5b9a54bd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Updated Mark for Rank1: 100\n","\n","After removing Rank5:\n"," Rank1    100\n","Rank2     92\n","Rank3     89\n","Rank4     85\n","dtype: int64\n","\n","CGPA (marks / 10):\n"," Rank1    10.0\n","Rank2     9.2\n","Rank3     8.9\n","Rank4     8.5\n","dtype: float64\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Creating Data frame\n","\n","data = {\n","    'TransactionID': [101, 102, 103, 104, 105, 106, 107, 108, 109, 110],\n","    'ProductCategory': ['Electronics', 'Clothing', 'Electronics', 'Furniture',\n","                        'Clothing', 'Electronics', 'Furniture', 'Clothing', 'Furniture', 'Electronics'],\n","    'Region': ['North', 'South', 'North', 'East', 'West', 'North', 'East', 'West', 'South', 'North'],\n","    'Amount': [200, 150, 300, 450, 200, 250, 300, 180, 350, 400]\n","}\n","\n","transactions = pd.DataFrame(data)\n","transactions.set_index('TransactionID', inplace=True)\n","\n","print(\"Transactions DataFrame:\\n\", transactions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W3OG2zaYhNOw","executionInfo":{"status":"ok","timestamp":1751903335657,"user_tz":-330,"elapsed":150,"user":{"displayName":"Muhammed Rayif","userId":"06425225599452089122"}},"outputId":"19298577-d49d-43f2-d45c-09e095638f76"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Transactions DataFrame:\n","               ProductCategory Region  Amount\n","TransactionID                               \n","101               Electronics  North     200\n","102                  Clothing  South     150\n","103               Electronics  North     300\n","104                 Furniture   East     450\n","105                  Clothing   West     200\n","106               Electronics  North     250\n","107                 Furniture   East     300\n","108                  Clothing   West     180\n","109                 Furniture  South     350\n","110               Electronics  North     400\n"]}]},{"cell_type":"code","source":["#Data exploration\n","\n","print(\"\\nDataFrame Head:\")\n","print(transactions.head())\n","\n","print(\"\\nDataFrame Tail:\")\n","print(transactions.tail())\n","\n","print(\"\\nShape:\", transactions.shape)\n","print(\"Columns:\", transactions.columns.tolist())\n","print(\"Data Types:\\n\", transactions.dtypes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yYjD_r2gk9KP","executionInfo":{"status":"ok","timestamp":1751908596109,"user_tz":-330,"elapsed":36,"user":{"displayName":"Muhammed Rayif","userId":"06425225599452089122"}},"outputId":"58691961-5f20-437e-f49d-89820ee530b1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","DataFrame Head:\n","              ProductCategory Region  Amount\n","TransactionID                               \n","101               Electronics  North     200\n","102                  Clothing  South     150\n","103               Electronics  North     300\n","104                 Furniture   East     450\n","105                  Clothing   West     200\n","\n","DataFrame Tail:\n","              ProductCategory Region  Amount\n","TransactionID                               \n","106               Electronics  North     250\n","107                 Furniture   East     300\n","108                  Clothing   West     180\n","109                 Furniture  South     350\n","110               Electronics  North     400\n","\n","Shape: (10, 3)\n","Columns: ['ProductCategory', 'Region', 'Amount']\n","Data Types:\n"," ProductCategory    object\n","Region             object\n","Amount              int64\n","dtype: object\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Creating Data frame\n","data = {\n","    'TransactionID': [101, 102, 103, 104, 105, 106, 107, 108, 109, 110],\n","    'ProductCategory': ['Electronics', 'Clothing', 'Electronics', 'Furniture',\n","                        'Clothing', 'Electronics', 'Furniture', 'Clothing', 'Furniture', 'Electronics'],\n","    'Region': ['North', 'South', 'North', 'East', 'West', 'North', 'East', 'West', 'South', 'North'],\n","    'Amount': [200, 150, 300, 450, 200, 250, 300, 180, 350, 400]\n","}\n","\n","transactions = pd.DataFrame(data)\n","transactions.set_index('TransactionID', inplace=True)\n","\n","#Column and row  filterig\n","\n","# a) Only ProductCategory & Amount\n","print(\"\\nSelected Columns:\\n\", transactions[['ProductCategory', 'Amount']])\n","\n","# b) Last 3 columns using iloc\n","print(\"\\nLast 3 Columns:\\n\", transactions.iloc[:, -3:])\n","\n","# c) Filter Region is 'North' & Amount > 200\n","print(\"\\nFilter: Region is North & Amount > 200\\n\",\n","      transactions[(transactions['Region'] == 'North') & (transactions['Amount'] > 200)])\n","\n","# d) ProductCategory counts\n","print(\"\\nValue Counts for ProductCategory:\\n\", transactions['ProductCategory'].value_counts())\n","\n","# e) Unique Regions\n","print(\"\\nUnique Regions:\", transactions['Region'].unique())\n","\n","# f) Group by Region â†’ Mean Amount\n","print(\"\\nMean Amount by Region:\\n\", transactions.groupby('Region')['Amount'].mean())"],"metadata":{"id":"kwQJGhsG5NF0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1751914266762,"user_tz":-330,"elapsed":511,"user":{"displayName":"Muhammed Rayif","userId":"06425225599452089122"}},"outputId":"562bdb40-ec54-44f0-f159-13988671640a"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Selected Columns:\n","               ProductCategory  Amount\n","TransactionID                        \n","101               Electronics     200\n","102                  Clothing     150\n","103               Electronics     300\n","104                 Furniture     450\n","105                  Clothing     200\n","106               Electronics     250\n","107                 Furniture     300\n","108                  Clothing     180\n","109                 Furniture     350\n","110               Electronics     400\n","\n","Last 3 Columns:\n","               ProductCategory Region  Amount\n","TransactionID                               \n","101               Electronics  North     200\n","102                  Clothing  South     150\n","103               Electronics  North     300\n","104                 Furniture   East     450\n","105                  Clothing   West     200\n","106               Electronics  North     250\n","107                 Furniture   East     300\n","108                  Clothing   West     180\n","109                 Furniture  South     350\n","110               Electronics  North     400\n","\n","Filter: Region is North & Amount > 200\n","               ProductCategory Region  Amount\n","TransactionID                               \n","103               Electronics  North     300\n","106               Electronics  North     250\n","110               Electronics  North     400\n","\n","Value Counts for ProductCategory:\n"," ProductCategory\n","Electronics    4\n","Clothing       3\n","Furniture      3\n","Name: count, dtype: int64\n","\n","Unique Regions: ['North' 'South' 'East' 'West']\n","\n","Mean Amount by Region:\n"," Region\n","East     375.0\n","North    287.5\n","South    250.0\n","West     190.0\n","Name: Amount, dtype: float64\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Creating Data frame\n","data = {\n","    'TransactionID': [101, 102, 103, 104, 105, 106, 107, 108, 109, 110],\n","    'ProductCategory': ['Electronics', 'Clothing', 'Electronics', 'Furniture',\n","                        'Clothing', 'Electronics', 'Furniture', 'Clothing', 'Furniture', 'Electronics'],\n","    'Region': ['North', 'South', 'North', 'East', 'West', 'North', 'East', 'West', 'South', 'North'],\n","    'Amount': [200, 150, 300, 450, 200, 250, 300, 180, 350, 400]\n","}\n","\n","transactions = pd.DataFrame(data)\n","transactions.set_index('TransactionID', inplace=True)\n","\n","#Manipulating data frame\n","# a) Modify Amount for TransactionID 102\n","transactions.loc[102, 'Amount'] = 165\n","\n","# b) Add Discount column (10% of Amount)\n","transactions['Discount'] = transactions['Amount'] * 0.10\n","\n","# c) Remove row with TransactionID 109\n","transactions.drop(109, inplace=True)\n","\n","# d) Delete Discount column\n","transactions.drop('Discount', axis=1, inplace=True)\n","\n","print(\"\\nFinal DataFrame:\\n\", transactions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1xuWfX9WO0ud","executionInfo":{"status":"ok","timestamp":1751914529465,"user_tz":-330,"elapsed":55,"user":{"displayName":"Muhammed Rayif","userId":"06425225599452089122"}},"outputId":"4854ff53-d116-49e3-a89b-bfa3352b2668"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Final DataFrame:\n","               ProductCategory Region  Amount\n","TransactionID                               \n","101               Electronics  North     200\n","102                  Clothing  South     165\n","103               Electronics  North     300\n","104                 Furniture   East     450\n","105                  Clothing   West     200\n","106               Electronics  North     250\n","107                 Furniture   East     300\n","108                  Clothing   West     180\n","110               Electronics  North     400\n"]}]}]}